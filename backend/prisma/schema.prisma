generator client {
  provider        = "prisma-client-js"
  fieldReference  = "snake_case"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                     @id @default(cuid())
  email                         String                     @unique
  password_hash                 String
  role                          UserRole                   @default(user)
  status                        UserStatus                 @default(active)
  ref_code                      String                     @unique
  sponsor_id                    String?
  usdt_bep20_address            String?
  telegram_user_id              String?                    @unique
  telegram_link_status          String?
  first_name                    String?
  last_name                     String?
  phone                         String?
  created_at                    DateTime                   @default(now())
  updated_at                    DateTime                   @updatedAt
  telegram_username             String?
  withdrawal_type               String?                    @default("manual")
  withdrawal_wallet_address     String?
  withdrawal_wallet_verified    Boolean                    @default(false)
  withdrawal_wallet_verified_at DateTime?
  audit_logs                    AuditLog[]                 @relation("ActorLogs")
  bonuses_created               Bonus[]                    @relation("BonusCreator")
  bonuses_received              Bonus[]                    @relation("BonusReceiver")
  ledger_entries                LedgerEntry[]
  notifications                 Notification[]
  orders                        OrderDeposit[]
  referral_commissions_referred ReferralCommission[]       @relation("ReferredRef")
  referral_commissions_sponsor  ReferralCommission[]       @relation("SponsorRef")
  telegram_interactions         TelegramInteraction[]
  licenses                      UserLicense[]
  notification_settings         UserNotificationSettings[] @relation("UserNotificationSettings")
  sponsor                       User?                      @relation("UserSponsor", fields: [sponsor_id], references: [id])
  sponsored                     User[]                     @relation("UserSponsor")
  withdrawals_approved          Withdrawal[]               @relation("WithdrawalApprover")
  withdrawals                   Withdrawal[]

  @@map("users")
}

model AdminWallet {
  id               String         @id @default(cuid())
  label            String
  address          String         @unique
  status           String         @default("active")
  last_assigned_at DateTime?
  assigned_count   Int            @default(0)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  orders           OrderDeposit[]

  @@map("admin_wallets")
}

model LicenseProduct {
  id                 String         @id @default(cuid())
  name               String
  code               String         @unique
  price_usdt         Decimal        @db.Decimal(10, 2)
  daily_rate         Decimal        @db.Decimal(5, 4)
  duration_days      Int
  max_cap_percentage Decimal        @db.Decimal(5, 2)
  cashback_cap       Decimal        @default(1.00) @db.Decimal(5, 2)
  potential_cap      Decimal        @default(1.00) @db.Decimal(5, 2)
  description        String?
  sla_hours          Int?
  badge              String?
  target_user        String?
  status             String         @default("active")
  active             Boolean        @default(true)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  orders             OrderDeposit[]
  licenses           UserLicense[]

  @@map("license_products")
}

model OrderDeposit {
  id                 String         @id @default(cuid())
  user_id            String
  product_id         String
  amount_usdt        Decimal        @db.Decimal(18, 6)
  wallet_address     String
  tx_hash            String?
  status             OrderStatus    @default(pending)
  reserved_wallet_id String?
  payment_method     String         @default("USDT")
  paid_at            DateTime?
  confirmed_at       DateTime?
  raw_chain_payload  Json?
  expires_at         DateTime
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  product            LicenseProduct @relation(fields: [product_id], references: [id])
  reserved_wallet    AdminWallet?   @relation(fields: [reserved_wallet_id], references: [id])
  user               User           @relation(fields: [user_id], references: [id])

  @@map("orders_deposits")
}

model UserLicense {
  id                String                @id @default(cuid())
  user_id           String
  product_id        String
  order_id          String
  principal_usdt    Decimal        @db.Decimal(18, 6)
  total_earned_usdt Decimal               @default(0) @db.Decimal(18, 6)
  cashback_accum    Decimal               @default(0) @db.Decimal(18, 6)
  potential_accum   Decimal               @default(0) @db.Decimal(18, 6)
  status            LicenseStatus         @default(active)
  days_generated    Int                   @default(0)
  pause_potential   Boolean               @default(false)
  flags             Json                  @default("{}")
  started_at        DateTime              @default(now())
  ends_at           DateTime
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  earnings          LicenseDailyEarning[]
  product           LicenseProduct        @relation(fields: [product_id], references: [id])
  user              User                  @relation(fields: [user_id], references: [id])

  @@map("user_licenses")
}

model LicenseDailyEarning {
  id                 String      @id @default(cuid())
  license_id         String
  day_index          Int
  earning_date       DateTime
  cashback_amount    Decimal        @db.Decimal(18, 6)
  potential_amount   Decimal        @db.Decimal(18, 6)
  applied_to_balance Boolean     @default(false)
  applied_at         DateTime?
  created_at         DateTime    @default(now())
  license            UserLicense @relation(fields: [license_id], references: [id])

  @@unique([license_id, earning_date])
  @@map("license_daily_earnings")
}

model ReferralCommission {
  id               String           @id @default(cuid())
  sponsor_id       String
  referred_user_id String
  license_id       String
  order_id         String?
  amount_usdt      Decimal        @db.Decimal(18, 6)
  status           CommissionStatus @default(pending)
  release_at       DateTime?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  referred_user    User             @relation("ReferredRef", fields: [referred_user_id], references: [id])
  sponsor          User             @relation("SponsorRef", fields: [sponsor_id], references: [id])

  @@map("referral_commissions")
}

model Bonus {
  id                  String      @id @default(cuid())
  user_id             String
  amount_usdt         Decimal        @db.Decimal(18, 6)
  status              BonusStatus @default(pending)
  reason              String?
  created_by_admin_id String?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  created_by          User?       @relation("BonusCreator", fields: [created_by_admin_id], references: [id])
  user                User        @relation("BonusReceiver", fields: [user_id], references: [id])

  @@map("bonuses")
}

model Withdrawal {
  id                   String           @id @default(cuid())
  user_id              String
  amount_usdt          Decimal        @db.Decimal(18, 6)
  payout_address       String?
  status               WithdrawalStatus @default(requested)
  otp_id               String?
  otp_code_hash        String?
  otp_sent_at          DateTime?
  otp_verified_at      DateTime?
  approved_by_admin_id String?
  paid_at              DateTime?
  paid_tx_hash         String?
  notes                String?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  approved_by          User?            @relation("WithdrawalApprover", fields: [approved_by_admin_id], references: [id])
  user                 User             @relation(fields: [user_id], references: [id])

  @@map("withdrawals")
}

model LedgerEntry {
  id                      String          @id @default(cuid())
  user_id                 String
  amount                  Decimal
  direction               LedgerDirection
  ref_type                LedgerRefType
  ref_id                  String?
  available_balance_after Decimal?
  meta                    Json?
  created_at              DateTime        @default(now())
  user                    User            @relation(fields: [user_id], references: [id])

  @@map("ledger_entries")
}

model AuditLog {
  id            String   @id @default(cuid())
  actor_user_id String?
  action        String
  entity        String
  entity_id     String?
  old_values    Json?
  new_values    Json?
  diff          Json?
  ip_address    String?
  user_agent    String?
  created_at    DateTime @default(now())
  actor         User?    @relation("ActorLogs", fields: [actor_user_id], references: [id])

  @@map("audit_logs")
}

model Notification {
  id         String               @id @default(cuid())
  user_id    String
  type       NotificationType
  title      String
  message    String
  severity   NotificationSeverity @default(info)
  read_at    DateTime?
  meta       Json?
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  user       User                 @relation(fields: [user_id], references: [id])

  @@index([user_id, created_at])
  @@index([type, created_at])
  @@map("notifications")
}

model UserNotificationSettings {
  id                String           @id @default(cuid())
  user_id           String
  notification_type NotificationType
  enabled           Boolean          @default(true)
  email_enabled     Boolean          @default(false)
  push_enabled      Boolean          @default(true)
  telegram_enabled  Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  user              User             @relation("UserNotificationSettings", fields: [user_id], references: [id])

  @@unique([user_id, notification_type])
  @@map("user_notification_settings")
}

model Setting {
  key        String   @id
  value      Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("settings")
}

model TelegramChannel {
  id            String                @id @default(cuid())
  channel_id    String                @unique
  channel_name  String
  channel_type  ChannelType
  license_level String?
  description   String?
  invite_link   String?
  member_count  Int                   @default(0)
  status        ChannelStatus         @default(active)
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  interactions  TelegramInteraction[]

  @@map("telegram_channels")
}

model TelegramBot {
  id           String                @id @default(cuid())
  bot_token    String                @unique
  bot_username String                @unique
  bot_name     String
  bot_type     BotType
  status       BotStatus             @default(active)
  webhook_url  String?
  description  String?
  created_at   DateTime              @default(now())
  updated_at   DateTime              @updatedAt
  interactions TelegramInteraction[]

  @@map("telegram_bots")
}

model TelegramInteraction {
  id               String            @id @default(cuid())
  user_id          String
  channel_id       String?
  bot_id           String?
  interaction_type InteractionType
  content          String?
  metadata         Json?
  response         String?
  status           InteractionStatus @default(processed)
  timestamp        DateTime          @default(now())
  bot              TelegramBot?      @relation(fields: [bot_id], references: [id])
  channel          TelegramChannel?  @relation(fields: [channel_id], references: [id])
  user             User              @relation(fields: [user_id], references: [id])

  @@index([user_id, timestamp])
  @@index([channel_id, timestamp])
  @@map("telegram_interactions")
}

enum UserRole {
  user
  admin
}

enum UserStatus {
  active
  suspended
  deleted
}

enum OrderStatus {
  pending
  expired
  paid
  confirmed
  canceled
}

enum LicenseStatus {
  active
  paused
  completed
  canceled
}

enum CommissionStatus {
  pending
  released
  canceled
}

enum BonusStatus {
  pending
  released
  canceled
}

enum WithdrawalStatus {
  requested
  otp_sent
  otp_verified
  approved
  paid
  rejected
  canceled
  expired
}

enum LedgerDirection {
  credit
  debit
}

enum LedgerRefType {
  order
  license
  earning
  referral_commission
  bonus
  withdrawal
  admin_adjustment
  system
}

enum NotificationType {
  withdrawal
  order
  earning
  system
  security
  bonus
  referral
}

enum NotificationSeverity {
  info
  success
  warning
  error
}

enum ChannelType {
  license_basic
  license_standard
  license_premium
  license_elite
  license_enterprise
  general_announcements
  technical_analysis
  market_updates
  support
  vip
}

enum ChannelStatus {
  active
  inactive
  archived
}

enum BotType {
  otp
  alerts
  communication
  support
}

enum BotStatus {
  active
  inactive
  maintenance
}

enum InteractionType {
  message
  command
  callback
  join
  leave
}

enum InteractionStatus {
  pending
  processed
  failed
}

enum SupportLevel {
  basic
  premium
  enterprise
}
